{"version":3,"sources":["components/DataRow.js","components/TableHeader.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["DataRow","props","emailList","data","email","split","map","className","clasName","type","onClick","updatedData","allData","d","key","currEmailList","filter","join","updateData","removeEmailHere","isChecked","removeEmailAll","faxList","fax","currFaxList","removeFaxHere","removeFaxAll","checked","onChange","toggledData","region","code","level","accnumber","STUB","REGIONLEVELS","DBOF","DBAO","DBJH","Array","from","length","i","REGIONS","Object","keys","TableHeader","useState","accNumber","setAccNumber","emailAddress","setEmaiAddress","faxNumber","setFaxNumber","accNumberAlert","setAccNumberAlert","regionChanged","e","newRegion","target","value","newData","lvl","addKeyCheck","regionSelect","selOpt","v","makeRegionSelect","tableHeader","scope","globalCheck","toggleSelected","onSubmit","preventDefault","toUpperCase","anum","regMatch","exec","validateAccNo","emadd","regEx","validateEmailAddress","find","updatedEmailList","updatedFaxList","console","log","Table","setGlobalCheck","dataRows","setDataRows","dataRowsJSX","assign","nanoid","FILTER_MAP","All","Active","task","completed","Completed","App","setData","csvData","setCsvData","file","a","reader","FileReader","onload","pe","csvParse","result","readAsText","id","role","readTxtFile","files","filterFun","csvContent","emails","faxes","f","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8df45a88.chunk.js","sourcesContent":["import { nanoid } from 'nanoid';\nimport React, { useState } from 'react';\n\n// <DataRow data={d} allData={ dataRows } updateData={ setDataRows } />\n\nexport default function DataRow(props) {\n\n  //console.log(\"Row: \")\n  //console.log(props.allData);\n\n  function removeEmailHere(email) {\n    const updatedData = props.allData.map( d => {\n      if (d.key === props.data.key) {\n        const currEmailList = d.email.split(',').filter( d => d !== email );\n        return {...d, email: currEmailList.join(',')};\n      } else {\n        return d;\n      }\n    });\n    props.updateData(updatedData);\n  }\n\n  function removeFaxHere(fax) {\n    const updatedData = props.allData.map( d => {\n      if (d.key === props.data.key) {\n        const currFaxList = d.fax.split(',').filter( d => d !== fax );\n        return {...d, fax: currFaxList.join(',')};\n      } else {\n        return d;\n      }\n    });\n    props.updateData(updatedData);\n  }\n\n  function removeEmailAll(email) {\n    const updatedData = props.allData.map( d => {\n      if (d.isChecked === true) {\n        const currEmailList = d.email.split(',').filter( d => d !== email );\n        return {...d, email: currEmailList.join(',')};\n      } else {\n        return d;\n      }\n    });\n    props.updateData(updatedData);\n  }\n\n  function removeFaxAll(fax) {\n    const updatedData = props.allData.map( d => {\n      if (d.isChecked === true) {\n        const currFaxList = d.fax.split(',').filter( d => d !== fax );\n        return {...d, fax: currFaxList.join(',')};\n      } else {\n        return d;\n      }\n    });\n    props.updateData(updatedData);\n  }\n\n\n  const emailList = props.data.email.split(',').map( email => {\n    if (email) {\n      return (\n        <li className=\"list-group-item\">\n          <div className=\"container\">\n            <div clasName=\"row\">\n              <div className=\"col align-self-start\">\n                {email}\n              </div>\n              <div className=\"col align-self-end\">\n                <button type=\"button\" className=\"btn btn-sm btn-outline-danger\" onClick={ () => removeEmailHere(email) }>Remove Here</button>\n                <button type=\"button\" className=\"btn btn-sm btn-danger\" onClick={ () => removeEmailAll(email) }>Remove in selected</button>\n              </div>\n            </div>\n          </div>\n        </li>\n      )}});\n\n  const faxList = props.data.fax.split(',').map( fax => {\n    if (fax) {\n      return (\n        <li className=\"list-group-item\">\n          <div className=\"container\">\n            <div clasName=\"row\">\n              <div className=\"col align-self-start\">\n                {fax}\n              </div>\n              <div className=\"col align-self-end\">\n                <button type=\"button\" className=\"btn btn-sm btn-outline-danger\" onClick={ () => removeFaxHere(fax) }>Remove Here</button>\n                <button type=\"button\" className=\"btn btn-sm btn-danger\" onClick={ () => removeFaxAll(fax) }>Remove in selected</button>\n              </div>\n            </div>\n          </div>\n        </li>\n      )}});\n\n  function toggleCheckbox() {\n    let toggledData = props.allData.map( d => {\n      if (d.key === props.data.key ) {\n        return { ...d, isChecked: !d.isChecked };\n      }\n      return d;\n    });\n    props.updateData(toggledData);\n    props.data.isChecked = !props.data.isChecked;\n  }\n\n  return(\n    <tr key={props.data.key}>\n          <td>\n      <input \n        className=\"form-check form-check-input\" \n        type=\"checkbox\" \n        checked={ props.data.isChecked }\n        onChange={ toggleCheckbox }\n      />\n    </td>\n    <td>{ props.data.region }</td>\n    <td>{ props.data.code }</td>\n    <td>{ props.data.level }</td>\n    <td>{ props.data.accnumber }</td>\n    <td><ul className=\"list-group\"> { emailList } </ul></td>\n    <td><ul className=\"list-group\"> { faxList } </ul></td>\n    </tr>\n  );\n}","import React, { useState } from 'react';\nimport { addKeyCheck } from './Table';\n\nconst STUB = {\n  region: '', code: 'CLT', level: '', accnumber: '', email: '', fax: ''\n};\n\nconst COLUMNS = {\n  region: [\"DBOF\", \"DBAO\"]\n};\n\nconst REGIONLEVELS = {\n  DBOF: [\"\", \"dbof-lvl1\", \"dbof-lvl2\", \"dbof-lvl3\"],\n  DBAO: [\"\", \"dbao-statements1\", \"dbao-contract-notes\"],\n  DBJH: [\"\", ...Array.from({length: 12}, (d,i) => \"dbjh-lvl-\" + (i+1))]\n}\n\nconst REGIONS = Object.keys(REGIONLEVELS);\n\n\n/*\n<TableHeader \n  globalCheck={globalCheck} toggleSelected={ toggleSelected }\n  allData={ dataRows } updateData={ setDataRows }\n/>\n*/\n\nexport default function TableHeader(props) {\n  const [ accNumber, setAccNumber ] = useState('');\n  const [ emailAddress, setEmaiAddress ] = useState('');\n  const [ faxNumber, setFaxNumber ] = useState('');\n  const [ accNumberAlert, setAccNumberAlert ] = useState(\"alert-danger\");\n\n  //select in the header\n  function makeRegionSelect() {\n    const selOpt = REGIONS.map( v => (\n      <option value={v}>{v}</option>\n    ));\n    return(\n      <select className=\"form-select form-select-sm\" onChange={ regionChanged }>\n        {selOpt}\n      </select>\n    )\n  }\n\n  function regionChanged(e) {\n    const newRegion = e.target.value;\n    let newData = REGIONLEVELS[newRegion].map( lvl => {\n      return {...STUB, region: newRegion, level: lvl}\n    });\n    props.updateData(addKeyCheck(newData));\n  }\n\n  function updateAccNo(e) {\n    setAccNumber(e.target.value);\n    validateAccNo(e.target.value);\n  }\n\n  function changeAccNo(e) {\n    e.preventDefault();\n    const updatedData = props.allData.map( d => {\n      return d.isChecked?{...d, accnumber: accNumber.toUpperCase()}:d;\n    });\n    props.updateData(updatedData);\n  }\n\n  function validateAccNo(anum) {\n    let regMatch = /[a-z0-9]{3}\\d{7}/gmi.exec(anum);\n    if ((anum && anum.length==10) && (regMatch && regMatch.length > 0)) {\n      setAccNumberAlert(\"alert-success\");\n    } else {\n      setAccNumberAlert(\"alert-danger\");\n    } \n  }\n\n  function validateEmailAddress(emadd) {\n    const regMatch = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/g;\n    let regEx = regMatch.exec(emadd);\n    if(regEx && regEx.length > 0) {\n      return true;\n    } \n      return false;\n  }\n\n  function updateCurrentEmail(e) {\n    setEmaiAddress(e.target.value);\n  }\n\n  function addEmail(e) {\n    e.preventDefault();\n    const updatedData = props.allData.map( d => {\n      if (d.isChecked && validateEmailAddress(emailAddress)) {\n        let previousEmailList = d.email.split(\",\");\n        if (!previousEmailList.find(e => e.toUpperCase() === emailAddress.toUpperCase())) {\n          let updatedEmailList = [d.email.split(\",\"), emailAddress].join(',');\n          //console.log(updatedEmailList);\n          return {...d, email: updatedEmailList };\n        }\n      }\n      return d;\n    });\n    //console.log(updatedData);\n    props.updateData(updatedData);\n  }\n\n  function updateCurrentFax(e) {\n    setFaxNumber(e.target.value);\n  }\n\n  function addFax(e) {\n    e.preventDefault();\n    const updatedData = props.allData.map( d => {\n      if (d.isChecked) {\n        let previousFaxList = d.fax.split(\",\");\n        if (!previousFaxList.find(e => e === faxNumber )) {\n          let updatedFaxList = [d.fax.split(\",\"), faxNumber].join(',');\n          //console.log(updatedEmailList);\n          return {...d, fax: updatedFaxList };\n        }\n      }\n      return d;\n    });\n    console.log(updatedData);\n    props.updateData(updatedData);\n  }\n\n  const regionSelect = makeRegionSelect();\n\n  const tableHeader = (\n    <tr>\n      <th scope=\"col\">\n        <input \n          className=\"form-check form-check-input\" \n          type=\"checkbox\" checked={!props.globalCheck} \n          onClick={props.toggleSelected}\n        />\n      </th>\n      <th scope=\"col\">{ regionSelect }</th>\n      <th scope=\"col\">code</th>\n      <th scope=\"col\">level</th>\n      <th scope=\"col\">\n        <form onSubmit={ changeAccNo }>\n          <input type=\"text\" onChange={ updateAccNo } />\n          <button type=\"submit\" className={ accNumberAlert }>change</button>\n        </form>\n      </th>\n      <th scope=\"col\">\n        <form onSubmit={ addEmail }>\n          <input type=\"text\" onChange={ updateCurrentEmail }/>\n          <button type=\"submit\">add</button>\n        </form>\n      </th>\n      <th scope=\"col\">\n        <form onSubmit={ addFax }>\n          <input type=\"text\" onChange={ updateCurrentFax }/>\n          <button type=\"submit\">add</button>\n        </form>\n      </th>\n    </tr>\n  );\n\n\n  return(\n    <thead>\n      { tableHeader }\n    </thead>\n  );\n}","import React, { useState } from 'react';\nimport DataRow from './DataRow';\nimport TableHeader from './TableHeader';\nimport { csvParse } from 'd3';\nimport { nanoid } from 'nanoid';\n\nconst REGLVLS = {\n  DBOF: [\"\", \"dbof_level1\", \"dbof_level2\"],\n  DBJH: [\"\", \"dbjh_level1\", \"dbjh_level2\"]\n}\n\nexport default function Table(props) {\n  const [globalCheck, setGlobalCheck] = useState(false);\n\n  const dataRows = props.data;\n  \n  function setDataRows(data) {\n    props.updateData(data);\n  }\n\n  //const [dataRows, setDataRows] = useState(props.data?props.data:addKeyCheck(SAMPLEDATA));\n\n  const dataRowsJSX = dataRows.map( d => (\n    <DataRow data={d} allData={ dataRows } updateData={ setDataRows } />\n  ));\n\n  //let headerList = Object.keys(dataRows[0]).filter(cname => cname!==\"key\"); //[\"#\", \"First Name\", \"Second Name\"];\n  //headerList = ['checkboxes', ...headerList];\n\n  function toggleSelected() {\n    setGlobalCheck(!globalCheck);\n    setDataRows(dataRows.map( d => { return Object.assign(d, {isChecked: globalCheck})}));\n    //console.log(dataRows[0]);\n  }\n\n  return (\n    <table className=\"table table-dark table-hover table-striped\">\n      <TableHeader \n        globalCheck={globalCheck} toggleSelected={ toggleSelected }\n        allData={ dataRows } updateData={ setDataRows }\n      />\n      <tbody>{ dataRowsJSX }</tbody>\n    </table>\n  );\n}\n\nexport function addKeyCheck(data) {\n  return data.map(d => Object.assign({key: nanoid(), isChecked: true}, d));\n}","import { useState } from 'react';\nimport Table, { addKeyCheck } from './components/Table';\nimport { csvParse } from 'd3';\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nfunction App(props) {\n  const [data, setData] = useState(addKeyCheck(props.data));\n  const [csvData, setCsvData] = useState('');\n  const [filter, setFilter] = useState(\"All\");\n\n  function handleFileChange(e) {\n    console.log(readTxtFile(e.target.files[0]));\n  }\n\n  async function readTxtFile(file) {\n    const reader = new FileReader();\n    reader.onload =  pe => setData(addKeyCheck(csvParse(pe.target.result)));\n    reader.readAsText(file);\n  }\n\n  function generateCsv() {\n    //console.log(\"genearting csv\");\n    //const headerNames = 'region,code,level,account,email,fax';\n    let csvContent = data.filter(d => d.isChecked).map( d => {\n      let emails = d.email.split(',').filter(e => e && e.length>0).join(',');\n      let faxes = d.fax.split(',').filter(f => f && f.length>0).join('#');\n      //console.log(d.fax);\n      return [d.region, d.code, d.level, d.accnumber, `\"${emails}\"`, `${faxes}`].join(',');\n    });\n\n    //csvContent = [headerNames, ...csvContent].join('\\n');\n\n    setCsvData(csvContent.join('\\n'));\n  }\n\n  function copyToClipboard() {\n    var copyText = document.getElementById(\"csvText\");\n    copyText.select();\n    document.execCommand(\"copy\");\n    alert(\"Text copied to the clipboard\");\n  }\n\n  return (\n    <div className=\"tab-content\">\n      <div className=\"tab-pane fade show active\" id=\"main\" role=\"tabpanel\">\n        <div className=\"table-responsive\">\n          <input type=\"file\" onChange={handleFileChange} />\n          <Table data={ data } updateData={ setData } filterFun={ FILTER_MAP[filter] }/>\n        </div>\n      </div>\n      <div className=\"tab-pane fade show active\" id=\"csv\" role=\"tabpanel\">\n        <div className=\"container\">\n          <div className=\"container\">\n            <button className=\"btn btn-primary\" onClick={ generateCsv }>Generate content of the load file</button>\n          </div>\n          <div id=\"csvText\">\n            { csvData }\n          </div>\n        </div>\n      </div>\n    </div>\n\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst SAMPLEDATA = [\n  {region: 'DBOF', code: 'CLT', level: '', accnumber: 'FUS0000001', email: \"email1@a.ie,email2@a.ie\", fax: '123'},\n  {region: 'DBOF', code: 'CLT', level: 'CONTRACT-NOTES', accnumber: 'FUS0000001', email: \"email1@a.ie,email2@a.ie\", fax: ''}\n]\n\nReactDOM.render(\n  <React.StrictMode>\n    <App data={ SAMPLEDATA }/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}